"""Подсчитать, сколько было выделено памяти под переменные в ранее разработанных
программах в рамках первых трех уроков. Проанализировать результат и определить
программы с наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов
кода для одной и той же задачи. Результаты анализа вставьте в виде комментариев к
коду. Также укажите в комментариях версию Python и разрядность вашей ОС.

Версия Python 3.8

Разрядность ОС x64

Результат анализа работы скрипта task_2_3.py
Скопировано из консоли:

Введите натуральное число: 1
Обратное:  1
7       # результат вызова print(sys.getrefcount(number))
2       # результат вызова print(sys.getrefcount(rebmun))

Введите натуральное число: 999
Обратное:  999
2       # результат вызова print(sys.getrefcount(number))
2       # результат вызова print(sys.getrefcount(rebmun))

print(sys.getrefcount(number))  результат меняется в зависимости от введённого числа
встречались результаты: 2, 7, 9
print(sys.getrefcount(rebmun))  результат всегда 2


Результат анализа работы скрипта task_4_2.py
Скопировано из консоли:

Введите порядковый номер простого числа, которое хотите получить (нумерация начинается с 1): 999
Без использования «Решета Эратосфена»
999-е по счёту простое число: 7907
0.16758418083190918 секунд
2       # результат вызова print(f'{sys.getrefcount(target_position)}')
2       # результат вызова print(f'{sys.getrefcount(artisanal_result)}')
Используя алгоритм «Решето Эратосфена»
Введите число, до которого решето сгенерирует последовательность,в которой находится искомое простое число: 10000
999-е по счёту простое число: 7907
0.003989458084106445 секунд
2       # результат вызова print(f'{sys.getrefcount(target_position)}')
2       # результат вызова print(f'{sys.getrefcount(sieve_result)}')

На основании результатов я делаю вывод, что по затратам памяти функции одинаковы,
но чувствую, что ошибаюсь.

"""